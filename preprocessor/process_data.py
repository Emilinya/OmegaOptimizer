import re
import sys
import sympy as sp
from sympy.printing.rust import rust_code
from sympy.parsing.sympy_parser import parse_expr


def good_rust_code(expression):
    rust = rust_code(expression)
    assert isinstance(rust, str)

    for match in re.findall(r".?\d+.?", rust):
        if match[0] != "f" and match[0] != "/":
            if match[-1] != "." and match[-1] != "_":
                if match[-1] == "*":
                    rust = rust.replace(match, match[:-1] + "_f64*")
                elif match[0] == " ":
                    rust = rust.replace(match, match[:-1] + "_f64" + match[-1])
                elif match[-1] != ")":
                    rust += "_f64"
    return rust


def get_param_def(expression, params_str, param_sym):
    string = "let "
    varstr = "("
    varstr += ", ".join(
        p_str
        for p_str, p_sym in zip(params_str, param_sym)
        if p_sym in expression.free_symbols
    )
    varstr += ")"

    if varstr == "()":
        return ""

    if "," not in varstr:
        varstr = varstr[1:-1]
    string += varstr

    parstr = "("
    parstr += ", ".join(
        f"params[{i}]"
        for i, p_sym in enumerate(param_sym)
        if p_sym in expression.free_symbols
    )
    parstr += ")"

    if "," not in parstr:
        parstr = parstr[1:-1]
    string += " = " + parstr + ";"

    return string


def rustify_array(array):
    string = "["
    for v in array:
        string += good_rust_code(v) + ", "
    string = string[:-2] + "]"

    return string


def rustify_matrix(matrix):
    string = "[\n"
    n = matrix.shape[1]
    for i, v in enumerate(matrix):
        if i % n == 0:
            string += "\t\t["

        string += good_rust_code(v)

        if (i + 1) % n == 0:
            string += "],\n"
        else:
            string += ", "
    string += "\t]"

    return string


def function_str(f, variable, parameters, params, f_name):
    string = "#[allow(non_snake_case)]\n"
    try:
        dim = len(f.shape)
    except AttributeError:
        dim = 0

    out = "f64" if dim == 0 else "Array1<f64>" if dim == 1 else "Array2<f64>"
    string += f"pub fn {f_name}({variable}: f64, params: &Array1<f64>) -> {out} {{\n"

    param_def = get_param_def(f, parameters, params)
    if param_def == "":
        string = string.replace("params", "_")
    else:
        string += "\t" + param_def + "\n"

    if dim == 0:
        return_str = f"\t{good_rust_code(f)}\n}}"
    elif dim == 1:
        return_str = f"\tarray!{rustify_array(f)}\n}}"
    else:
        return_str = f"\tarray!{rustify_matrix(f)}\n}}"

    if not variable in return_str:
        string = string.replace(f"{variable}:", "_:")

    string += return_str

    return string

def main():
    datafile = "datafile.dat" if len(sys.argv) < 2 else sys.argv[1]
    datapath = f"data/{datafile}"

    with open(datapath, "r", encoding="utf8") as datafile:
        match = re.search(r".*?\((.*?);\s*?(.*?)\)\s*?=\s*?(.*)", datafile.readline())
        if match is None:
            raise ValueError("Waaaa")
        variable, parameters, expression = match[1], match[2], match[3]

    parameters = parameters.replace(" ", "").split(",")
    x, *params = sp.symbols(f"{variable}, {' '.join(parameters)}")

    local_dict = {s: v for s, v in zip(parameters, params)}
    local_dict[variable] = x

    symbolic_f = parse_expr(expression, local_dict=local_dict)
    symbolic_grad_f = sp.simplify(sp.derive_by_array(symbolic_f, params))
    symbolic_hessian = sp.simplify(sp.derive_by_array(symbolic_grad_f, params).tomatrix())

    with open("src/function.rs", "w", encoding="utf8") as funcfile:
        funcfile.write(
            f"""\
// this file is autogenerated by process_data.py, do not edit

use ndarray::prelude::*;

{function_str(symbolic_f, variable, parameters, params, "f")}

{function_str(symbolic_grad_f, variable, parameters, params, "grad_f")}

{function_str(symbolic_hessian, variable, parameters, params, "hess_f")}
"""
        )

if __name__ == "__main__":
    main()
